<?php

  namespace AUScraper;

  //Imports
  use GuzzleHttp\Pool;
  use GuzzleHttp\Client;
  use GuzzleHttp\Psr7\Request;

  class Routes {
    // Returns result assoc_array from HTML
    private function sanitizeHTML($html) {

      // Check if the register number is valid
      if(strpos($html, "is wrong!")) {
        return ['error' => 'invalid register number'];
      }

      //Contruct a DOM from the $html
      $dom = new \DOMDocument('1.0', 'UTF-8');
      libxml_use_internal_errors(true);
      $dom->loadHTML($html);

      //Create a DOMXPath Object and query for all <td> with bgcolor="#fffaea" attribute
      $domX = new \DOMXPath($dom);
      $extracted = []; //Stores the extracted Values
      foreach($domX->query('//td[@bgcolor="#fffaea"]') as $rowNode) {
        $extracted[] =  trim($rowNode->nodeValue);
      }

      //Sanitize the data
      $result = [];

      $result["register_no"] = $extracted[0];
      $result["name"] = $extracted[1];
      $result["department"] = $extracted[2];
      for($i = 6; $i < count($extracted); $i += 3) // Used count() since the number of subjects may vary
        $result[$extracted[$i]] = $extracted[$i + 1]; // Every 3Nth element as key, 3N + 1 as value

      return $result;
    }

    // Returns an array of results from the given register number to the required offset
    private function requestAU($regno, $offset) {
      // Send `$offset + 1` requests and collect the sanitized data into $results
      $client = new Client();
      $results = [];

      $requests = function ($total) use($regno) { // Request Generator function
          $uri = 'http://aucoe.annauniv.edu/cgi-bin/result/cgrade.pl?regno=';
          $reg = $regno;
          for ($i = 0; $i <= $total; $i++) {
              yield new Request('GET', $uri . $reg);
              $reg++;
          }
      };

      $pool = new Pool($client, $requests($offset), [
          'concurrency' => 100,
          'fulfilled' => function ($response, $index) use(&$results) {
              $results[] = $this->sanitizeHTML($response->getBody());
          }
      ]);

      // Initiate the transfers and create a promise
      $promise = $pool->promise();

      // Force the pool of requests to complete.
      $promise->wait();

      return $results;

    }

    // ANY `/api` route - serve docs
    public function anyIndex() {
      readfile('../views/apidoc.html');
    }

    // POST `/api/json` route - serve JSON results
    public function postJson() {

      // Parse request body
      $reqBody = json_decode(file_get_contents('php://input'));
      header('Content-Type: application/json');

      // On Valid Request
      if(isset($reqBody, $reqBody->regno, $reqBody->offset) && $reqBody->offset < 100 && $reqBody->offset >= 0) {
        return json_encode($this->requestAU($reqBody->regno, $reqBody->offset));
      }
      // On Invalid Request
      http_response_code(400);
      return json_encode(['error' => 'invalid request']);
    }

    // POST `/api/excel` route - serves .xls file
    public function postExcel() {

      // Parse request body
      $reqBody = json_decode(file_get_contents('php://input'));

      // On Valid Request
      if(isset($reqBody, $reqBody->regno, $reqBody->offset) && $reqBody->offset < 100 && $reqBody->offset >= 0 && strlen($reqBody->regno) == 12) {
        // Create and add metadata to the workbook
        $workbook = new \PHPExcel();
        $workbook->getProperties()
                 ->setCreator('AUScraper')
                 ->setTitle('AU Results')
                 ->setLastModifiedBy('AUScraper')
                 ->setDescription('generated by AUScraper')
                 ->setSubject('generated by AUScraper')
                 ->setKeywords('anna university unofficial semester result API')
                 ->setCategory('semester results');

        $worksheet = $workbook->getSheet(0);
        $worksheet->setTitle('results');

        // Get the results
        $results = $this->requestAU($reqBody->regno, $reqBody->offset);

        // Update worksheet

        // The excel file contains only current semester results.
        // To find the subjects in current semester from arrear, we select a
        // result with no arrear and use it for heading column.
        // Since we are retrieving results asynchronously, most probably, the
        // first result will have the least number of subjects, i.e., with no
        // arrear.
        $columns = array_keys($results[0]);

        // Duplicate the headers to make it readable
        $columnsReadable    = $columns;
        $columnsReadable[0] = 'REGISTER NO.';
        $columnsReadable[1] = 'NAME';
        $columnsReadable[2] = 'DEPARTMENT';

        // Fill the first row with column heading
        $worksheet->fromArray($columnsReadable, NULL, 'A1');

        // Add results to the excel file
        $row = 1;
        foreach($results as $result) {
          if(isset($result['error'])) continue; // Skip the invalid result
          $row++;
          $col = -1;
          foreach($columns as $column) {
            $col++;
            $worksheet->setCellValueByColumnAndRow($col, $row, $result[$column]);
          }
        }

        // Style the Excel

        // Heading cell range
        $highestColumn = $worksheet->getHighestColumn();
        $headerRange = 'A1:' . $worksheet->getHighestColumn() . '1';

        //Style for header
        $headerStyle = [
          'font' => [
            'bold' => true,
            'color' => ['rgb' => 'FFFFFF']
          ],
          'alignment' => ['horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER],
          'fill' => [
            'type' => \PHPExcel_Style_Fill::FILL_SOLID,
            'color' => ['rgb' => '4CAF50']
          ]
        ];

        $worksheet->getStyle($headerRange)
                  ->applyFromArray($headerStyle);

        $worksheet->getRowDimension('1')->setRowHeight(23);

        // Style for Rows
        $rowStyleEven = [
          'font' => [
            'name' => 'Verdana',
            'size' => '10',
            'color' => ['rgb' => '212121']
          ],
          'fill' => [
            'type' => \PHPExcel_Style_Fill::FILL_SOLID,
            'color' => ['rgb' => 'E0E0E0']
          ]
        ];

        $rowStyleOdd = [
          'font' => [
            'name' => 'Verdana',
            'size' => '10',
            'color' => ['rgb' => '212121']
          ],
          'fill' => [
            'type' => \PHPExcel_Style_Fill::FILL_SOLID,
            'color' => ['rgb' => 'FFFFFF']
          ]
        ];

        // Alternate color for rows
        for($row = 2; $row <= $worksheet->getHighestRow(); $row++) {
          $rowRange = 'A' . $row . ':' . $highestColumn . $row;
          if($row % 2) {
            $worksheet->getStyle($rowRange)->applyFromArray($rowStyleEven);
          }
          else {
            $worksheet->getStyle($rowRange)->applyFromArray($rowStyleOdd);
          }
        }

        // Iterate from `A` column to maximum filled column and Resizes it accordingly
        for($col = 'A'; $col < $worksheet->getHighestColumn(); $col++) {
          $worksheet->getColumnDimension($col)->setAutoSize(true);
        }

        //Output the file
        ob_clean();
        header("Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        header("Content-Disposition: attachment; filename=\"results.xlsx\"");
        header("Cache-Control: max-age=0");
        header("Expires: 0");

        $workbookWriter = new \PHPExcel_Writer_Excel2007($workbook);
        $workbookWriter->save("php://output");
      }

      // On Invalid Request
      header('Content-Type: application/json');
      http_response_code(400);
      return json_encode(['error' => 'invalid request']);
    }
  }
